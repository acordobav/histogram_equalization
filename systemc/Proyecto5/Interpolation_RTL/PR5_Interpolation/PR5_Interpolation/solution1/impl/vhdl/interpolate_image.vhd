-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity interpolate_image is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_image_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    input_image_ce0 : OUT STD_LOGIC;
    input_image_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_image_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    input_image_ce1 : OUT STD_LOGIC;
    input_image_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_image_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    output_image_ce0 : OUT STD_LOGIC;
    output_image_we0 : OUT STD_LOGIC;
    output_image_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of interpolate_image is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "interpolate_image,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.285400,HLS_SYN_LAT=2851841,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=2035,HLS_SYN_LUT=3745,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (49 downto 0) := "00000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (49 downto 0) := "00000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (49 downto 0) := "00000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (49 downto 0) := "00000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (49 downto 0) := "00000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (49 downto 0) := "00000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (49 downto 0) := "00001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (49 downto 0) := "00010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (49 downto 0) := "00100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (49 downto 0) := "01000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (49 downto 0) := "10000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_40210000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000001000010000000000000000";
    constant ap_const_lv32_3FD88000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110110001000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv41_1B2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000110110010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_221 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal reg_225 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal zext_ln16_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal y_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_953 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_1_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln310_fu_260_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln310_reg_963 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_5_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_974 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln17_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal x_fu_287_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_reg_987 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_2_reg_992 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln17_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_3_fu_302_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_3_reg_998 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln31_fu_330_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln31_reg_1003 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_15_fu_472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_15_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Val2_17_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_17_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_fu_597_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln26_reg_1034 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal mul_ln29_fu_612_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln29_reg_1040 : STD_LOGIC_VECTOR (40 downto 0);
    signal sub_ln26_fu_642_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln26_reg_1046 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_6_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln26_1_fu_678_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln26_1_reg_1056 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln29_fu_705_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln29_reg_1061 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln29_1_fu_732_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln29_1_reg_1066 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_7_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_744_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_1079 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln21_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln29_3_fu_778_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln29_3_reg_1094 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln29_4_fu_783_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln29_4_reg_1099 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln31_1_fu_788_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln31_1_reg_1104 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln26_fu_801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_1_fu_806_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_fu_811_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal zext_ln29_1_fu_816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1139 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_11_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal top_reg_1159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal bottom_reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_V_4_reg_1169 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tmp_V_5_fu_835_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_5_reg_1175 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_0_reg_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_reg_156 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_167 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal zext_ln26_4_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_5_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_2_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_3_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_182_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_252_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln31_fu_305_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln31_fu_309_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln31_fu_318_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_cast_fu_322_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln31_1_fu_314_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_358_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_362_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_348_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_376_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_380_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_394_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_400_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_404_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_6_fu_416_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_372_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_420_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_424_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_21_fu_436_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_430_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_448_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_340_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_V_1_fu_480_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln339_1_fu_493_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_1_fu_496_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_1_fu_510_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_502_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_2_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_519_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_3_fu_527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_7_fu_531_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_1_fu_489_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_1_fu_535_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_2_fu_539_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_23_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_545_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_1_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_563_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_16_fu_573_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_3_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln26_fu_618_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln26_1_fu_621_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln26_1_fu_630_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl4_cast_fu_634_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln26_fu_626_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln26_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln26_2_fu_653_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln26_2_fu_657_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln26_3_fu_666_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl3_cast_fu_670_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln26_2_fu_662_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln29_1_fu_684_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln29_1_fu_693_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl2_cast_fu_697_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln29_fu_689_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln29_2_fu_711_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln29_3_fu_720_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_724_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln29_2_fu_716_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln26_3_fu_754_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln26_3_fu_758_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln26_4_fu_768_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln26_2_fu_750_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_10_fu_821_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_V_2_fu_843_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln339_2_fu_856_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_2_fu_859_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_2_fu_873_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_865_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_4_fu_878_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_882_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_5_fu_890_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_8_fu_894_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_2_fu_852_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln1287_2_fu_898_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_4_fu_902_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_27_fu_914_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_908_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln662_2_fu_922_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_926_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_178_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln16_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (49 downto 0);

    component interpolate_image_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component interpolate_image_fsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component interpolate_image_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component interpolate_image_sitofp_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component interpolate_image_sitofp_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    interpolate_image_faddfsub_32ns_32ns_32_4_full_dsp_1_U1 : component interpolate_image_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_178_p0,
        din1 => grp_fu_178_p1,
        opcode => grp_fu_178_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    interpolate_image_fsub_32ns_32ns_32_4_full_dsp_1_U2 : component interpolate_image_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_182_p0,
        din1 => grp_fu_182_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);

    interpolate_image_fmul_32ns_32ns_32_3_max_dsp_1_U3 : component interpolate_image_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_188_p0,
        din1 => grp_fu_188_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);

    interpolate_image_fmul_32ns_32ns_32_3_max_dsp_1_U4 : component interpolate_image_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_194_p0,
        din1 => dx_reg_1022,
        ce => ap_const_logic_1,
        dout => grp_fu_194_p2);

    interpolate_image_sitofp_32ns_32_4_1_U5 : component interpolate_image_sitofp_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p1);

    interpolate_image_sitofp_32s_32_4_1_U6 : component interpolate_image_sitofp_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_201_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                c_0_reg_167 <= c_reg_1079;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                c_0_reg_167 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    x_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                x_0_reg_156 <= x_reg_987;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                x_0_reg_156 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    y_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln17_fu_281_p2 = ap_const_lv1_1))) then 
                y_0_reg_144 <= y_reg_953;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_reg_144 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln21_fu_738_p2 = ap_const_lv1_0))) then
                add_ln29_3_reg_1094 <= add_ln29_3_fu_778_p2;
                add_ln29_4_reg_1099 <= add_ln29_4_fu_783_p2;
                add_ln31_1_reg_1104 <= add_ln31_1_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                bottom_reg_1164 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                c_reg_1079 <= c_fu_744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                dx_reg_1022 <= grp_fu_178_p2;
                dy_reg_1028 <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                mul_ln26_reg_1034 <= mul_ln26_fu_597_p2;
                mul_ln29_reg_1040 <= mul_ln29_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Result_1_reg_974 <= p_Val2_5_fu_264_p1(31 downto 31);
                p_Val2_5_reg_968 <= p_Val2_5_fu_264_p1;
                x_assign_1_reg_958 <= grp_fu_188_p2;
                    zext_ln310_reg_963(15 downto 8) <= zext_ln310_fu_260_p1(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                p_Val2_15_reg_1008 <= p_Val2_15_fu_472_p3;
                p_Val2_17_reg_1015 <= p_Val2_17_fu_587_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_204 <= grp_fu_198_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_210 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_215 <= grp_fu_201_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_221 <= input_image_q0;
                reg_225 <= input_image_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_229 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                sub_ln26_1_reg_1056 <= sub_ln26_1_fu_678_p2;
                sub_ln26_reg_1046 <= sub_ln26_fu_642_p2;
                sub_ln29_1_reg_1066 <= sub_ln29_1_fu_732_p2;
                sub_ln29_reg_1061 <= sub_ln29_fu_705_p2;
                tmp_6_reg_1051 <= grp_fu_178_p2;
                tmp_7_reg_1071 <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln17_fu_281_p2 = ap_const_lv1_0))) then
                sub_ln31_reg_1003 <= sub_ln31_fu_330_p2;
                tmp_V_2_reg_992 <= p_Val2_5_reg_968(30 downto 23);
                tmp_V_3_reg_998 <= tmp_V_3_fu_302_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                tmp_11_reg_1144 <= grp_fu_201_p1;
                tmp_3_reg_1139 <= grp_fu_198_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_12_reg_1154 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                tmp_1_reg_1149 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                tmp_V_4_reg_1169 <= p_Val2_10_fu_821_p1(30 downto 23);
                tmp_V_5_reg_1175 <= tmp_V_5_fu_835_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                top_reg_1159 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                x_reg_987 <= x_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_reg_953 <= y_fu_246_p2;
            end if;
        end if;
    end process;
    zext_ln310_reg_963(7 downto 0) <= "00000000";
    zext_ln310_reg_963(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln17_fu_281_p2, ap_CS_fsm_state29, icmp_ln21_fu_738_p2, icmp_ln16_fu_240_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln16_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln17_fu_281_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln21_fu_738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_1_fu_621_p2 <= std_logic_vector(signed(sext_ln26_fu_618_p1) + signed(mul_ln26_reg_1034));
    add_ln26_2_fu_657_p2 <= std_logic_vector(signed(sext_ln26_2_fu_653_p1) + signed(mul_ln26_reg_1034));
    add_ln26_3_fu_758_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_754_p1) + unsigned(sub_ln26_reg_1046));
    add_ln26_4_fu_768_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_754_p1) + unsigned(sub_ln26_1_reg_1056));
    add_ln26_fu_648_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Val2_15_reg_1008));
    add_ln29_1_fu_684_p2 <= std_logic_vector(signed(sext_ln26_fu_618_p1) + signed(mul_ln29_reg_1040));
    add_ln29_2_fu_711_p2 <= std_logic_vector(signed(sext_ln26_2_fu_653_p1) + signed(mul_ln29_reg_1040));
    add_ln29_3_fu_778_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_754_p1) + unsigned(sub_ln29_reg_1061));
    add_ln29_4_fu_783_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_754_p1) + unsigned(sub_ln29_1_reg_1066));
    add_ln29_fu_603_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Val2_17_reg_1015));
    add_ln31_1_fu_788_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_750_p1) + unsigned(sub_ln31_reg_1003));
    add_ln31_fu_309_p2 <= std_logic_vector(unsigned(zext_ln31_fu_305_p1) + unsigned(zext_ln310_reg_963));
    add_ln339_1_fu_496_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_1_fu_493_p1));
    add_ln339_2_fu_859_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_2_fu_856_p1));
    add_ln339_fu_380_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_376_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_240_p2)
    begin
        if (((icmp_ln16_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_240_p2)
    begin
        if (((icmp_ln16_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_744_p2 <= std_logic_vector(unsigned(c_0_reg_167) + unsigned(ap_const_lv2_1));

    grp_fu_178_opcode_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state39, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_178_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_178_opcode <= ap_const_lv2_0;
        else 
            grp_fu_178_opcode <= "XX";
        end if; 
    end process;


    grp_fu_178_p0_assign_proc : process(reg_210, reg_229, ap_CS_fsm_state38, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state39, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_178_p0 <= reg_229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_178_p0 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_178_p0 <= reg_210;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_178_p1_assign_proc : process(reg_204, reg_229, ap_CS_fsm_state38, dx_reg_1022, tmp_1_reg_1149, tmp_12_reg_1154, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state39, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_178_p1 <= reg_229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_178_p1 <= tmp_12_reg_1154;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_178_p1 <= tmp_1_reg_1149;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_178_p1 <= dx_reg_1022;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_178_p1 <= reg_204;
        else 
            grp_fu_178_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_182_p0_assign_proc : process(x_assign_1_reg_958, ap_CS_fsm_state21, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_182_p0 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_182_p0 <= x_assign_1_reg_958;
        else 
            grp_fu_182_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_182_p1_assign_proc : process(reg_215, dy_reg_1028, ap_CS_fsm_state21, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_182_p1 <= dy_reg_1028;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_182_p1 <= reg_215;
        else 
            grp_fu_182_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_p0_assign_proc : process(reg_204, tmp_3_reg_1139, ap_CS_fsm_state35, top_reg_1159, bottom_reg_1164, ap_CS_fsm_state42, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state36, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_188_p0 <= bottom_reg_1164;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_188_p0 <= top_reg_1159;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_188_p0 <= tmp_3_reg_1139;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_188_p0 <= reg_204;
        else 
            grp_fu_188_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_p1_assign_proc : process(dy_reg_1028, tmp_6_reg_1051, tmp_7_reg_1071, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state36, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_188_p1 <= dy_reg_1028;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_188_p1 <= tmp_7_reg_1071;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_188_p1 <= tmp_6_reg_1051;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_188_p1 <= ap_const_lv32_3FD88000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_188_p1 <= ap_const_lv32_40210000;
        else 
            grp_fu_188_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_194_p0_assign_proc : process(reg_215, ap_CS_fsm_state35, tmp_11_reg_1144, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_194_p0 <= tmp_11_reg_1144;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_194_p0 <= reg_215;
        else 
            grp_fu_194_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_198_p0_assign_proc : process(ap_CS_fsm_state31, zext_ln16_fu_235_p1, ap_CS_fsm_state2, zext_ln17_fu_276_p1, ap_CS_fsm_state9, p_Val2_15_reg_1008, zext_ln26_fu_801_p1, zext_ln29_fu_811_p1, ap_CS_fsm_state32, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_198_p0 <= zext_ln29_fu_811_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_198_p0 <= zext_ln26_fu_801_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_198_p0 <= p_Val2_15_reg_1008;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_198_p0 <= zext_ln17_fu_276_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_198_p0 <= zext_ln16_fu_235_p1;
        else 
            grp_fu_198_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_201_p0_assign_proc : process(ap_CS_fsm_state31, p_Val2_17_reg_1015, zext_ln26_1_fu_806_p1, ap_CS_fsm_state32, zext_ln29_1_fu_816_p1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_201_p0 <= zext_ln29_1_fu_816_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_201_p0 <= zext_ln26_1_fu_806_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_201_p0 <= p_Val2_17_reg_1015;
        else 
            grp_fu_201_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln16_fu_240_p2 <= "1" when (y_0_reg_144 = ap_const_lv8_80) else "0";
    icmp_ln17_fu_281_p2 <= "1" when (x_0_reg_156 = ap_const_lv9_100) else "0";
    icmp_ln21_fu_738_p2 <= "1" when (c_0_reg_167 = ap_const_lv2_3) else "0";

    input_image_address0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state29, zext_ln26_4_fu_763_p1, zext_ln29_2_fu_793_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            input_image_address0 <= zext_ln29_2_fu_793_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input_image_address0 <= zext_ln26_4_fu_763_p1(19 - 1 downto 0);
        else 
            input_image_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_image_address1_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state29, zext_ln26_5_fu_773_p1, zext_ln29_3_fu_797_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            input_image_address1 <= zext_ln29_3_fu_797_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input_image_address1 <= zext_ln26_5_fu_773_p1(19 - 1 downto 0);
        else 
            input_image_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_image_ce0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            input_image_ce0 <= ap_const_logic_1;
        else 
            input_image_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_image_ce1_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            input_image_ce1 <= ap_const_logic_1;
        else 
            input_image_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_502_p3 <= add_ln339_1_fu_496_p2(8 downto 8);
    isNeg_2_fu_865_p3 <= add_ln339_2_fu_859_p2(8 downto 8);
    isNeg_fu_386_p3 <= add_ln339_fu_380_p2(8 downto 8);
    mantissa_V_1_fu_480_p4 <= ((ap_const_lv1_1 & tmp_V_3_reg_998) & ap_const_lv1_0);
    mantissa_V_2_fu_843_p4 <= ((ap_const_lv1_1 & tmp_V_5_reg_1175) & ap_const_lv1_0);
    mantissa_V_fu_362_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_358_p1) & ap_const_lv1_0);
    mul_ln26_fu_597_p1 <= p_Val2_17_reg_1015;
    mul_ln26_fu_597_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv41_1B2) * signed(mul_ln26_fu_597_p1))), 41));
    mul_ln29_fu_612_p1 <= add_ln29_fu_603_p2;
    mul_ln29_fu_612_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv41_1B2) * signed(mul_ln29_fu_612_p1))), 41));
    output_image_address0 <= zext_ln31_2_fu_839_p1(17 - 1 downto 0);

    output_image_ce0_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            output_image_ce0 <= ap_const_logic_1;
        else 
            output_image_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_image_d0 <= 
        zext_ln662_2_fu_922_p1 when (isNeg_2_fu_865_p3(0) = '1') else 
        tmp_19_fu_926_p4;

    output_image_we0_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            output_image_we0 <= ap_const_logic_1;
        else 
            output_image_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_340_p3 <= p_Val2_s_fu_336_p1(31 downto 31);
    p_Val2_10_fu_821_p1 <= grp_fu_178_p2;
    p_Val2_14_fu_458_p3 <= 
        zext_ln662_fu_444_p1 when (isNeg_fu_386_p3(0) = '1') else 
        tmp_17_fu_448_p4;
    p_Val2_15_fu_472_p3 <= 
        result_V_1_fu_466_p2 when (p_Result_s_fu_340_p3(0) = '1') else 
        p_Val2_14_fu_458_p3;
    p_Val2_16_fu_573_p3 <= 
        zext_ln662_1_fu_559_p1 when (isNeg_1_fu_502_p3(0) = '1') else 
        tmp_18_fu_563_p4;
    p_Val2_17_fu_587_p3 <= 
        result_V_3_fu_581_p2 when (p_Result_1_reg_974(0) = '1') else 
        p_Val2_16_fu_573_p3;
    p_Val2_5_fu_264_p1 <= grp_fu_188_p2;
    p_Val2_s_fu_336_p1 <= reg_210;
    p_shl1_cast_fu_724_p3 <= (trunc_ln29_3_fu_720_p1 & ap_const_lv2_0);
    p_shl2_cast_fu_697_p3 <= (trunc_ln29_1_fu_693_p1 & ap_const_lv2_0);
    p_shl3_cast_fu_670_p3 <= (trunc_ln26_3_fu_666_p1 & ap_const_lv2_0);
    p_shl4_cast_fu_634_p3 <= (trunc_ln26_1_fu_630_p1 & ap_const_lv2_0);
    p_shl_cast_fu_322_p3 <= (trunc_ln31_fu_318_p1 & ap_const_lv2_0);
    r_V_1_fu_430_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_372_p1),to_integer(unsigned('0' & zext_ln1287_fu_420_p1(31-1 downto 0)))));
    r_V_2_fu_539_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_480_p4),to_integer(unsigned('0' & sext_ln1311_7_fu_531_p1(25-1 downto 0)))));
    r_V_3_fu_545_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_1_fu_489_p1),to_integer(unsigned('0' & zext_ln1287_1_fu_535_p1(31-1 downto 0)))));
    r_V_4_fu_902_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_2_fu_843_p4),to_integer(unsigned('0' & sext_ln1311_8_fu_894_p1(25-1 downto 0)))));
    r_V_5_fu_908_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_2_fu_852_p1),to_integer(unsigned('0' & zext_ln1287_2_fu_898_p1(31-1 downto 0)))));
    r_V_fu_424_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_362_p4),to_integer(unsigned('0' & sext_ln1311_6_fu_416_p1(25-1 downto 0)))));
    result_V_1_fu_466_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_14_fu_458_p3));
    result_V_3_fu_581_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_16_fu_573_p3));
        sext_ln1311_1_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_404_p3),32));

        sext_ln1311_2_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_510_p2),9));

        sext_ln1311_3_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_519_p3),32));

        sext_ln1311_4_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_2_fu_873_p2),9));

        sext_ln1311_5_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_882_p3),32));

        sext_ln1311_6_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_404_p3),25));

        sext_ln1311_7_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_519_p3),25));

        sext_ln1311_8_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_882_p3),25));

        sext_ln1311_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_394_p2),9));

        sext_ln26_2_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_fu_648_p2),41));

        sext_ln26_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_15_reg_1008),41));

    sub_ln1311_1_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_2_reg_992));
    sub_ln1311_2_fu_873_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_4_reg_1169));
    sub_ln1311_fu_394_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_348_p4));
    sub_ln26_1_fu_678_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_670_p3) - unsigned(trunc_ln26_2_fu_662_p1));
    sub_ln26_fu_642_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_634_p3) - unsigned(trunc_ln26_fu_626_p1));
    sub_ln29_1_fu_732_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_724_p3) - unsigned(trunc_ln29_2_fu_716_p1));
    sub_ln29_fu_705_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_697_p3) - unsigned(trunc_ln29_fu_689_p1));
    sub_ln31_fu_330_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_322_p3) - unsigned(zext_ln31_1_fu_314_p1));
    tmp_15_fu_252_p3 <= (y_0_reg_144 & ap_const_lv8_0);
    tmp_17_fu_448_p4 <= r_V_1_fu_430_p2(55 downto 24);
    tmp_18_fu_563_p4 <= r_V_3_fu_545_p2(55 downto 24);
    tmp_19_fu_926_p4 <= r_V_5_fu_908_p2(31 downto 24);
    tmp_21_fu_436_p3 <= r_V_fu_424_p2(24 downto 24);
    tmp_23_fu_551_p3 <= r_V_2_fu_539_p2(24 downto 24);
    tmp_27_fu_914_p3 <= r_V_4_fu_902_p2(24 downto 24);
    tmp_V_1_fu_358_p1 <= p_Val2_s_fu_336_p1(23 - 1 downto 0);
    tmp_V_3_fu_302_p1 <= p_Val2_5_reg_968(23 - 1 downto 0);
    tmp_V_5_fu_835_p1 <= p_Val2_10_fu_821_p1(23 - 1 downto 0);
    tmp_V_fu_348_p4 <= p_Val2_s_fu_336_p1(30 downto 23);
    trunc_ln26_1_fu_630_p1 <= add_ln26_1_fu_621_p2(18 - 1 downto 0);
    trunc_ln26_2_fu_662_p1 <= add_ln26_2_fu_657_p2(20 - 1 downto 0);
    trunc_ln26_3_fu_666_p1 <= add_ln26_2_fu_657_p2(18 - 1 downto 0);
    trunc_ln26_fu_626_p1 <= add_ln26_1_fu_621_p2(20 - 1 downto 0);
    trunc_ln29_1_fu_693_p1 <= add_ln29_1_fu_684_p2(18 - 1 downto 0);
    trunc_ln29_2_fu_716_p1 <= add_ln29_2_fu_711_p2(20 - 1 downto 0);
    trunc_ln29_3_fu_720_p1 <= add_ln29_2_fu_711_p2(18 - 1 downto 0);
    trunc_ln29_fu_689_p1 <= add_ln29_1_fu_684_p2(20 - 1 downto 0);
    trunc_ln31_fu_318_p1 <= add_ln31_fu_309_p2(16 - 1 downto 0);
    ush_1_fu_519_p3 <= 
        sext_ln1311_2_fu_515_p1 when (isNeg_1_fu_502_p3(0) = '1') else 
        add_ln339_1_fu_496_p2;
    ush_2_fu_882_p3 <= 
        sext_ln1311_4_fu_878_p1 when (isNeg_2_fu_865_p3(0) = '1') else 
        add_ln339_2_fu_859_p2;
    ush_fu_404_p3 <= 
        sext_ln1311_fu_400_p1 when (isNeg_fu_386_p3(0) = '1') else 
        add_ln339_fu_380_p2;
    x_fu_287_p2 <= std_logic_vector(unsigned(x_0_reg_156) + unsigned(ap_const_lv9_1));
    y_fu_246_p2 <= std_logic_vector(unsigned(y_0_reg_144) + unsigned(ap_const_lv8_1));
    zext_ln1287_1_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_3_fu_527_p1),79));
    zext_ln1287_2_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_5_fu_890_p1),55));
    zext_ln1287_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_412_p1),79));
    zext_ln16_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_144),32));
    zext_ln17_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_156),32));
    zext_ln26_1_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_225),32));
    zext_ln26_2_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_167),18));
    zext_ln26_3_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_167),20));
    zext_ln26_4_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_758_p2),64));
    zext_ln26_5_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_4_fu_768_p2),64));
    zext_ln26_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_221),32));
    zext_ln29_1_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_225),32));
    zext_ln29_2_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_3_reg_1094),64));
    zext_ln29_3_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_4_reg_1099),64));
    zext_ln29_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_221),32));
    zext_ln310_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_252_p3),17));
    zext_ln31_1_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_309_p2),18));
    zext_ln31_2_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_1_reg_1104),64));
    zext_ln31_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_156),17));
    zext_ln339_1_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_reg_992),9));
    zext_ln339_2_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_1169),9));
    zext_ln339_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_348_p4),9));
    zext_ln662_1_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_551_p3),32));
    zext_ln662_2_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_914_p3),8));
    zext_ln662_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_436_p3),32));
    zext_ln682_1_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_480_p4),79));
    zext_ln682_2_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_2_fu_843_p4),55));
    zext_ln682_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_362_p4),79));
end behav;
