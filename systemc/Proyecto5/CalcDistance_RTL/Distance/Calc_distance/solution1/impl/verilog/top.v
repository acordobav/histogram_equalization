// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.418000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=11,HLS_SYN_FF=768,HLS_SYN_LUT=1962,HLS_VERSION=2019_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trigger,
        simulated_time,
        dist_cm,
        dist_cm_ap_vld,
        calc_voltage,
        calc_voltage_ap_vld,
        sens_range,
        sens_range_ap_vld
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] trigger;
input  [63:0] simulated_time;
output  [31:0] dist_cm;
output   dist_cm_ap_vld;
output  [63:0] calc_voltage;
output   calc_voltage_ap_vld;
output  [31:0] sens_range;
output   sens_range_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dist_cm_ap_vld;
reg calc_voltage_ap_vld;
reg sens_range_ap_vld;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_125_p2;
reg   [63:0] reg_135;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state15;
wire   [31:0] p_Val2_6_fu_275_p3;
reg   [31:0] p_Val2_6_reg_467;
wire    ap_CS_fsm_state6;
reg   [29:0] tmp_4_reg_480;
wire   [0:0] icmp_ln8_fu_293_p2;
reg   [0:0] icmp_ln8_reg_485;
wire    ap_CS_fsm_state7;
wire   [0:0] and_ln14_2_fu_366_p2;
reg   [0:0] and_ln14_2_reg_490;
wire   [0:0] and_ln12_2_fu_385_p2;
reg   [0:0] and_ln12_2_reg_495;
wire   [63:0] grp_fu_132_p1;
reg   [63:0] tmp_2_reg_500;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state16;
reg   [63:0] grp_fu_125_p0;
reg   [63:0] grp_fu_125_p1;
wire    ap_CS_fsm_state11;
wire   [63:0] p_Val2_s_fu_139_p1;
wire   [51:0] tmp_V_1_fu_161_p1;
wire   [53:0] mantissa_V_fu_165_p4;
wire   [10:0] tmp_V_fu_151_p4;
wire   [11:0] zext_ln502_fu_179_p1;
wire   [11:0] add_ln502_fu_183_p2;
wire   [10:0] sub_ln1311_fu_197_p2;
wire   [0:0] isNeg_fu_189_p3;
wire  signed [11:0] sext_ln1311_fu_203_p1;
wire   [11:0] ush_fu_207_p3;
wire  signed [31:0] sext_ln1311_1_fu_215_p1;
wire   [53:0] zext_ln1285_fu_223_p1;
wire   [136:0] zext_ln682_fu_175_p1;
wire   [136:0] zext_ln1287_fu_219_p1;
wire   [53:0] r_V_fu_227_p2;
wire   [0:0] tmp_fu_239_p3;
wire   [136:0] r_V_1_fu_233_p2;
wire   [31:0] zext_ln662_fu_247_p1;
wire   [31:0] tmp_1_fu_251_p4;
wire   [31:0] p_Val2_5_fu_261_p3;
wire   [0:0] p_Result_s_fu_143_p3;
wire   [31:0] result_V_1_fu_269_p2;
wire   [0:0] icmp_ln16_fu_319_p2;
wire   [0:0] icmp_ln16_1_fu_324_p2;
wire   [0:0] icmp_ln12_fu_299_p2;
wire   [0:0] icmp_ln12_1_fu_304_p2;
wire   [0:0] and_ln12_fu_342_p2;
wire   [0:0] xor_ln12_fu_348_p2;
wire   [0:0] icmp_ln14_1_fu_314_p2;
wire   [0:0] icmp_ln14_fu_309_p2;
wire   [0:0] and_ln14_1_fu_360_p2;
wire   [0:0] and_ln14_fu_354_p2;
wire   [31:0] select_ln8_fu_335_p3;
wire   [0:0] and_ln12_1_fu_379_p2;
wire   [31:0] select_ln14_fu_372_p3;
wire   [0:0] and_ln16_fu_329_p2;
wire   [0:0] and_ln8_fu_399_p2;
wire   [0:0] or_ln12_fu_421_p2;
wire   [1:0] select_ln12_2_fu_413_p3;
wire   [1:0] select_ln8_2_fu_405_p3;
wire   [1:0] select_ln12_3_fu_427_p3;
wire   [63:0] select_ln8_1_fu_440_p3;
wire   [63:0] select_ln14_1_fu_447_p3;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

top_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_dmul_64ns_64ns_64_5_max_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_125_p0),
    .din1(grp_fu_125_p1),
    .ce(1'b1),
    .dout(grp_fu_125_p2)
);

top_sitodp_32ns_64_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
top_sitodp_32ns_64_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_Val2_6_reg_467),
    .ce(1'b1),
    .dout(grp_fu_132_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        and_ln12_2_reg_495 <= and_ln12_2_fu_385_p2;
        and_ln14_2_reg_490 <= and_ln14_2_fu_366_p2;
        icmp_ln8_reg_485 <= icmp_ln8_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_6_reg_467 <= p_Val2_6_fu_275_p3;
        tmp_4_reg_480 <= {{p_Val2_6_fu_275_p3[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_135 <= grp_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_2_reg_500 <= grp_fu_132_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        calc_voltage_ap_vld = 1'b1;
    end else begin
        calc_voltage_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        dist_cm_ap_vld = 1'b1;
    end else begin
        dist_cm_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_125_p0 = tmp_2_reg_500;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_125_p0 = simulated_time;
    end else begin
        grp_fu_125_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_125_p1 = 64'd4565021520528425773;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_125_p1 = 64'd4585060737430373532;
    end else begin
        grp_fu_125_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sens_range_ap_vld = 1'b1;
    end else begin
        sens_range_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln502_fu_183_p2 = ($signed(12'd3073) + $signed(zext_ln502_fu_179_p1));

assign and_ln12_1_fu_379_p2 = (icmp_ln8_fu_293_p2 & icmp_ln12_1_fu_304_p2);

assign and_ln12_2_fu_385_p2 = (icmp_ln12_fu_299_p2 & and_ln12_1_fu_379_p2);

assign and_ln12_fu_342_p2 = (icmp_ln12_fu_299_p2 & icmp_ln12_1_fu_304_p2);

assign and_ln14_1_fu_360_p2 = (icmp_ln14_fu_309_p2 & icmp_ln14_1_fu_314_p2);

assign and_ln14_2_fu_366_p2 = (and_ln14_fu_354_p2 & and_ln14_1_fu_360_p2);

assign and_ln14_fu_354_p2 = (xor_ln12_fu_348_p2 & icmp_ln8_fu_293_p2);

assign and_ln16_fu_329_p2 = (icmp_ln16_fu_319_p2 & icmp_ln16_1_fu_324_p2);

assign and_ln8_fu_399_p2 = (icmp_ln8_fu_293_p2 & and_ln16_fu_329_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign calc_voltage = ((and_ln12_2_reg_495[0:0] === 1'b1) ? reg_135 : select_ln14_1_fu_447_p3);

assign dist_cm = ((and_ln12_2_fu_385_p2[0:0] === 1'b1) ? p_Val2_6_reg_467 : select_ln14_fu_372_p3);

assign icmp_ln12_1_fu_304_p2 = (($signed(p_Val2_6_reg_467) < $signed(32'd101)) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_299_p2 = (($signed(tmp_4_reg_480) > $signed(30'd0)) ? 1'b1 : 1'b0);

assign icmp_ln14_1_fu_314_p2 = (($signed(p_Val2_6_reg_467) < $signed(32'd201)) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_309_p2 = (($signed(p_Val2_6_reg_467) > $signed(32'd100)) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_324_p2 = (($signed(p_Val2_6_reg_467) < $signed(32'd301)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_319_p2 = (($signed(p_Val2_6_reg_467) > $signed(32'd200)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_293_p2 = ((trigger == 32'd1) ? 1'b1 : 1'b0);

assign isNeg_fu_189_p3 = add_ln502_fu_183_p2[32'd11];

assign mantissa_V_fu_165_p4 = {{{{1'd1}, {tmp_V_1_fu_161_p1}}}, {1'd0}};

assign or_ln12_fu_421_p2 = (and_ln14_2_fu_366_p2 | and_ln12_2_fu_385_p2);

assign p_Result_s_fu_143_p3 = p_Val2_s_fu_139_p1[32'd63];

assign p_Val2_5_fu_261_p3 = ((isNeg_fu_189_p3[0:0] === 1'b1) ? zext_ln662_fu_247_p1 : tmp_1_fu_251_p4);

assign p_Val2_6_fu_275_p3 = ((p_Result_s_fu_143_p3[0:0] === 1'b1) ? result_V_1_fu_269_p2 : p_Val2_5_fu_261_p3);

assign p_Val2_s_fu_139_p1 = reg_135;

assign r_V_1_fu_233_p2 = zext_ln682_fu_175_p1 << zext_ln1287_fu_219_p1;

assign r_V_fu_227_p2 = mantissa_V_fu_165_p4 >> zext_ln1285_fu_223_p1;

assign result_V_1_fu_269_p2 = (32'd0 - p_Val2_5_fu_261_p3);

assign select_ln12_2_fu_413_p3 = ((and_ln12_2_fu_385_p2[0:0] === 1'b1) ? 2'd1 : 2'd2);

assign select_ln12_3_fu_427_p3 = ((or_ln12_fu_421_p2[0:0] === 1'b1) ? select_ln12_2_fu_413_p3 : select_ln8_2_fu_405_p3);

assign select_ln14_1_fu_447_p3 = ((and_ln14_2_reg_490[0:0] === 1'b1) ? reg_135 : select_ln8_1_fu_440_p3);

assign select_ln14_fu_372_p3 = ((and_ln14_2_fu_366_p2[0:0] === 1'b1) ? p_Val2_6_reg_467 : select_ln8_fu_335_p3);

assign select_ln8_1_fu_440_p3 = ((icmp_ln8_reg_485[0:0] === 1'b1) ? reg_135 : 64'd0);

assign select_ln8_2_fu_405_p3 = ((and_ln8_fu_399_p2[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln8_fu_335_p3 = ((icmp_ln8_fu_293_p2[0:0] === 1'b1) ? p_Val2_6_reg_467 : 32'd0);

assign sens_range = select_ln12_3_fu_427_p3;

assign sext_ln1311_1_fu_215_p1 = $signed(ush_fu_207_p3);

assign sext_ln1311_fu_203_p1 = $signed(sub_ln1311_fu_197_p2);

assign sub_ln1311_fu_197_p2 = (11'd1023 - tmp_V_fu_151_p4);

assign tmp_1_fu_251_p4 = {{r_V_1_fu_233_p2[84:53]}};

assign tmp_V_1_fu_161_p1 = p_Val2_s_fu_139_p1[51:0];

assign tmp_V_fu_151_p4 = {{p_Val2_s_fu_139_p1[62:52]}};

assign tmp_fu_239_p3 = r_V_fu_227_p2[32'd53];

assign ush_fu_207_p3 = ((isNeg_fu_189_p3[0:0] === 1'b1) ? sext_ln1311_fu_203_p1 : add_ln502_fu_183_p2);

assign xor_ln12_fu_348_p2 = (1'd1 ^ and_ln12_fu_342_p2);

assign zext_ln1285_fu_223_p1 = $unsigned(sext_ln1311_1_fu_215_p1);

assign zext_ln1287_fu_219_p1 = $unsigned(sext_ln1311_1_fu_215_p1);

assign zext_ln502_fu_179_p1 = tmp_V_fu_151_p4;

assign zext_ln662_fu_247_p1 = tmp_fu_239_p3;

assign zext_ln682_fu_175_p1 = mantissa_V_fu_165_p4;

endmodule //top
