-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    trigger : IN STD_LOGIC_VECTOR (31 downto 0);
    simulated_time : IN STD_LOGIC_VECTOR (63 downto 0);
    dist_cm : OUT STD_LOGIC_VECTOR (31 downto 0);
    dist_cm_ap_vld : OUT STD_LOGIC;
    calc_voltage : OUT STD_LOGIC_VECTOR (63 downto 0);
    calc_voltage_ap_vld : OUT STD_LOGIC;
    sens_range : OUT STD_LOGIC_VECTOR (31 downto 0);
    sens_range_ap_vld : OUT STD_LOGIC );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.418000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=11,HLS_SYN_FF=768,HLS_SYN_LUT=1962,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_3FA16872B020C49C : STD_LOGIC_VECTOR (63 downto 0) := "0011111110100001011010000111001010110000001000001100010010011100";
    constant ap_const_lv64_3F5A36E2EB1C432D : STD_LOGIC_VECTOR (63 downto 0) := "0011111101011010001101101110001011101011000111000100001100101101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_C9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001001";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_12D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_125_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_135 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_Val2_6_fu_275_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_4_reg_480 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln8_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal and_ln14_2_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_2_reg_490 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_2_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_2_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_500 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_125_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_s_fu_139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_1_fu_161_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_165_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_151_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln502_fu_179_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_183_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_197_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_203_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_207_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_1_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_223_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_175_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_fu_219_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_227_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_239_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_233_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_251_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_261_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_143_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln16_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_1_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln12_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_1_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_fu_335_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln12_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_fu_372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln16_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_2_fu_413_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln8_2_fu_405_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln12_3_fu_427_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln8_1_fu_440_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln14_1_fu_447_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component top_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_sitodp_32ns_64_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    top_dmul_64ns_64ns_64_5_max_dsp_1_U1 : component top_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_125_p0,
        din1 => grp_fu_125_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_125_p2);

    top_sitodp_32ns_64_4_1_U2 : component top_sitodp_32ns_64_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Val2_6_reg_467,
        ce => ap_const_logic_1,
        dout => grp_fu_132_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                and_ln12_2_reg_495 <= and_ln12_2_fu_385_p2;
                and_ln14_2_reg_490 <= and_ln14_2_fu_366_p2;
                icmp_ln8_reg_485 <= icmp_ln8_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_Val2_6_reg_467 <= p_Val2_6_fu_275_p3;
                tmp_4_reg_480 <= p_Val2_6_fu_275_p3(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_135 <= grp_fu_125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_2_reg_500 <= grp_fu_132_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln502_fu_183_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_179_p1));
    and_ln12_1_fu_379_p2 <= (icmp_ln8_fu_293_p2 and icmp_ln12_1_fu_304_p2);
    and_ln12_2_fu_385_p2 <= (icmp_ln12_fu_299_p2 and and_ln12_1_fu_379_p2);
    and_ln12_fu_342_p2 <= (icmp_ln12_fu_299_p2 and icmp_ln12_1_fu_304_p2);
    and_ln14_1_fu_360_p2 <= (icmp_ln14_fu_309_p2 and icmp_ln14_1_fu_314_p2);
    and_ln14_2_fu_366_p2 <= (and_ln14_fu_354_p2 and and_ln14_1_fu_360_p2);
    and_ln14_fu_354_p2 <= (xor_ln12_fu_348_p2 and icmp_ln8_fu_293_p2);
    and_ln16_fu_329_p2 <= (icmp_ln16_fu_319_p2 and icmp_ln16_1_fu_324_p2);
    and_ln8_fu_399_p2 <= (icmp_ln8_fu_293_p2 and and_ln16_fu_329_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    calc_voltage <= 
        reg_135 when (and_ln12_2_reg_495(0) = '1') else 
        select_ln14_1_fu_447_p3;

    calc_voltage_ap_vld_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            calc_voltage_ap_vld <= ap_const_logic_1;
        else 
            calc_voltage_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dist_cm <= 
        p_Val2_6_reg_467 when (and_ln12_2_fu_385_p2(0) = '1') else 
        select_ln14_fu_372_p3;

    dist_cm_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dist_cm_ap_vld <= ap_const_logic_1;
        else 
            dist_cm_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_125_p0_assign_proc : process(ap_CS_fsm_state1, simulated_time, tmp_2_reg_500, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_125_p0 <= tmp_2_reg_500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_125_p0 <= simulated_time;
        else 
            grp_fu_125_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_125_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_125_p1 <= ap_const_lv64_3F5A36E2EB1C432D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_125_p1 <= ap_const_lv64_3FA16872B020C49C;
        else 
            grp_fu_125_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln12_1_fu_304_p2 <= "1" when (signed(p_Val2_6_reg_467) < signed(ap_const_lv32_65)) else "0";
    icmp_ln12_fu_299_p2 <= "1" when (signed(tmp_4_reg_480) > signed(ap_const_lv30_0)) else "0";
    icmp_ln14_1_fu_314_p2 <= "1" when (signed(p_Val2_6_reg_467) < signed(ap_const_lv32_C9)) else "0";
    icmp_ln14_fu_309_p2 <= "1" when (signed(p_Val2_6_reg_467) > signed(ap_const_lv32_64)) else "0";
    icmp_ln16_1_fu_324_p2 <= "1" when (signed(p_Val2_6_reg_467) < signed(ap_const_lv32_12D)) else "0";
    icmp_ln16_fu_319_p2 <= "1" when (signed(p_Val2_6_reg_467) > signed(ap_const_lv32_C8)) else "0";
    icmp_ln8_fu_293_p2 <= "1" when (trigger = ap_const_lv32_1) else "0";
    isNeg_fu_189_p3 <= add_ln502_fu_183_p2(11 downto 11);
    mantissa_V_fu_165_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_161_p1) & ap_const_lv1_0);
    or_ln12_fu_421_p2 <= (and_ln14_2_fu_366_p2 or and_ln12_2_fu_385_p2);
    p_Result_s_fu_143_p3 <= p_Val2_s_fu_139_p1(63 downto 63);
    p_Val2_5_fu_261_p3 <= 
        zext_ln662_fu_247_p1 when (isNeg_fu_189_p3(0) = '1') else 
        tmp_1_fu_251_p4;
    p_Val2_6_fu_275_p3 <= 
        result_V_1_fu_269_p2 when (p_Result_s_fu_143_p3(0) = '1') else 
        p_Val2_5_fu_261_p3;
    p_Val2_s_fu_139_p1 <= reg_135;
    r_V_1_fu_233_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_175_p1),to_integer(unsigned('0' & zext_ln1287_fu_219_p1(31-1 downto 0)))));
    r_V_fu_227_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_165_p4),to_integer(unsigned('0' & zext_ln1285_fu_223_p1(31-1 downto 0)))));
    result_V_1_fu_269_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_fu_261_p3));
    select_ln12_2_fu_413_p3 <= 
        ap_const_lv2_1 when (and_ln12_2_fu_385_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln12_3_fu_427_p3 <= 
        select_ln12_2_fu_413_p3 when (or_ln12_fu_421_p2(0) = '1') else 
        select_ln8_2_fu_405_p3;
    select_ln14_1_fu_447_p3 <= 
        reg_135 when (and_ln14_2_reg_490(0) = '1') else 
        select_ln8_1_fu_440_p3;
    select_ln14_fu_372_p3 <= 
        p_Val2_6_reg_467 when (and_ln14_2_fu_366_p2(0) = '1') else 
        select_ln8_fu_335_p3;
    select_ln8_1_fu_440_p3 <= 
        reg_135 when (icmp_ln8_reg_485(0) = '1') else 
        ap_const_lv64_0;
    select_ln8_2_fu_405_p3 <= 
        ap_const_lv2_3 when (and_ln8_fu_399_p2(0) = '1') else 
        ap_const_lv2_0;
    select_ln8_fu_335_p3 <= 
        p_Val2_6_reg_467 when (icmp_ln8_fu_293_p2(0) = '1') else 
        ap_const_lv32_0;
    sens_range <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_3_fu_427_p3),32));

    sens_range_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sens_range_ap_vld <= ap_const_logic_1;
        else 
            sens_range_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1311_1_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_207_p3),32));

        sext_ln1311_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_197_p2),12));

    sub_ln1311_fu_197_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_151_p4));
    tmp_1_fu_251_p4 <= r_V_1_fu_233_p2(84 downto 53);
    tmp_V_1_fu_161_p1 <= p_Val2_s_fu_139_p1(52 - 1 downto 0);
    tmp_V_fu_151_p4 <= p_Val2_s_fu_139_p1(62 downto 52);
    tmp_fu_239_p3 <= r_V_fu_227_p2(53 downto 53);
    ush_fu_207_p3 <= 
        sext_ln1311_fu_203_p1 when (isNeg_fu_189_p3(0) = '1') else 
        add_ln502_fu_183_p2;
    xor_ln12_fu_348_p2 <= (ap_const_lv1_1 xor and_ln12_fu_342_p2);
    zext_ln1285_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_215_p1),54));
    zext_ln1287_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_215_p1),137));
    zext_ln502_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_151_p4),12));
    zext_ln662_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_239_p3),32));
    zext_ln682_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_165_p4),137));
end behav;
