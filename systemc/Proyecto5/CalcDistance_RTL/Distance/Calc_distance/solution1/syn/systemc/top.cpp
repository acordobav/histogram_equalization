// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> top::ap_ST_fsm_state1 = "1";
const sc_lv<16> top::ap_ST_fsm_state2 = "10";
const sc_lv<16> top::ap_ST_fsm_state3 = "100";
const sc_lv<16> top::ap_ST_fsm_state4 = "1000";
const sc_lv<16> top::ap_ST_fsm_state5 = "10000";
const sc_lv<16> top::ap_ST_fsm_state6 = "100000";
const sc_lv<16> top::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> top::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> top::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> top::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> top::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> top::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> top::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> top::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> top::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> top::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> top::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> top::ap_const_lv32_4 = "100";
const sc_lv<32> top::ap_const_lv32_E = "1110";
const sc_lv<32> top::ap_const_lv32_5 = "101";
const sc_lv<32> top::ap_const_lv32_6 = "110";
const sc_lv<32> top::ap_const_lv32_9 = "1001";
const sc_lv<32> top::ap_const_lv32_F = "1111";
const sc_lv<64> top::ap_const_lv64_3FA16872B020C49C = "11111110100001011010000111001010110000001000001100010010011100";
const sc_lv<64> top::ap_const_lv64_3F5A36E2EB1C432D = "11111101011010001101101110001011101011000111000100001100101101";
const sc_lv<32> top::ap_const_lv32_A = "1010";
const sc_lv<32> top::ap_const_lv32_3F = "111111";
const sc_lv<32> top::ap_const_lv32_34 = "110100";
const sc_lv<32> top::ap_const_lv32_3E = "111110";
const sc_lv<1> top::ap_const_lv1_1 = "1";
const sc_lv<1> top::ap_const_lv1_0 = "0";
const sc_lv<12> top::ap_const_lv12_C01 = "110000000001";
const sc_lv<32> top::ap_const_lv32_B = "1011";
const sc_lv<11> top::ap_const_lv11_3FF = "1111111111";
const sc_lv<32> top::ap_const_lv32_35 = "110101";
const sc_lv<32> top::ap_const_lv32_54 = "1010100";
const sc_lv<32> top::ap_const_lv32_2 = "10";
const sc_lv<32> top::ap_const_lv32_1F = "11111";
const sc_lv<32> top::ap_const_lv32_1 = "1";
const sc_lv<30> top::ap_const_lv30_0 = "000000000000000000000000000000";
const sc_lv<32> top::ap_const_lv32_65 = "1100101";
const sc_lv<32> top::ap_const_lv32_64 = "1100100";
const sc_lv<32> top::ap_const_lv32_C9 = "11001001";
const sc_lv<32> top::ap_const_lv32_C8 = "11001000";
const sc_lv<32> top::ap_const_lv32_12D = "100101101";
const sc_lv<2> top::ap_const_lv2_3 = "11";
const sc_lv<2> top::ap_const_lv2_0 = "00";
const sc_lv<2> top::ap_const_lv2_1 = "1";
const sc_lv<2> top::ap_const_lv2_2 = "10";
const sc_lv<64> top::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool top::ap_const_boolean_1 = true;

top::top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    top_dmul_64ns_64ns_64_5_max_dsp_1_U1 = new top_dmul_64ns_64ns_64_5_max_dsp_1<1,5,64,64,64>("top_dmul_64ns_64ns_64_5_max_dsp_1_U1");
    top_dmul_64ns_64ns_64_5_max_dsp_1_U1->clk(ap_clk);
    top_dmul_64ns_64ns_64_5_max_dsp_1_U1->reset(ap_rst);
    top_dmul_64ns_64ns_64_5_max_dsp_1_U1->din0(grp_fu_125_p0);
    top_dmul_64ns_64ns_64_5_max_dsp_1_U1->din1(grp_fu_125_p1);
    top_dmul_64ns_64ns_64_5_max_dsp_1_U1->ce(ap_var_for_const0);
    top_dmul_64ns_64ns_64_5_max_dsp_1_U1->dout(grp_fu_125_p2);
    top_sitodp_32ns_64_4_1_U2 = new top_sitodp_32ns_64_4_1<1,4,32,64>("top_sitodp_32ns_64_4_1_U2");
    top_sitodp_32ns_64_4_1_U2->clk(ap_clk);
    top_sitodp_32ns_64_4_1_U2->reset(ap_rst);
    top_sitodp_32ns_64_4_1_U2->din0(p_Val2_6_reg_467);
    top_sitodp_32ns_64_4_1_U2->ce(ap_var_for_const0);
    top_sitodp_32ns_64_4_1_U2->dout(grp_fu_132_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln502_fu_183_p2);
    sensitive << ( zext_ln502_fu_179_p1 );

    SC_METHOD(thread_and_ln12_1_fu_379_p2);
    sensitive << ( icmp_ln8_fu_293_p2 );
    sensitive << ( icmp_ln12_1_fu_304_p2 );

    SC_METHOD(thread_and_ln12_2_fu_385_p2);
    sensitive << ( icmp_ln12_fu_299_p2 );
    sensitive << ( and_ln12_1_fu_379_p2 );

    SC_METHOD(thread_and_ln12_fu_342_p2);
    sensitive << ( icmp_ln12_fu_299_p2 );
    sensitive << ( icmp_ln12_1_fu_304_p2 );

    SC_METHOD(thread_and_ln14_1_fu_360_p2);
    sensitive << ( icmp_ln14_1_fu_314_p2 );
    sensitive << ( icmp_ln14_fu_309_p2 );

    SC_METHOD(thread_and_ln14_2_fu_366_p2);
    sensitive << ( and_ln14_1_fu_360_p2 );
    sensitive << ( and_ln14_fu_354_p2 );

    SC_METHOD(thread_and_ln14_fu_354_p2);
    sensitive << ( icmp_ln8_fu_293_p2 );
    sensitive << ( xor_ln12_fu_348_p2 );

    SC_METHOD(thread_and_ln16_fu_329_p2);
    sensitive << ( icmp_ln16_fu_319_p2 );
    sensitive << ( icmp_ln16_1_fu_324_p2 );

    SC_METHOD(thread_and_ln8_fu_399_p2);
    sensitive << ( icmp_ln8_fu_293_p2 );
    sensitive << ( and_ln16_fu_329_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_calc_voltage);
    sensitive << ( reg_135 );
    sensitive << ( and_ln12_2_reg_495 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( select_ln14_1_fu_447_p3 );

    SC_METHOD(thread_calc_voltage_ap_vld);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_dist_cm);
    sensitive << ( p_Val2_6_reg_467 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( and_ln12_2_fu_385_p2 );
    sensitive << ( select_ln14_fu_372_p3 );

    SC_METHOD(thread_dist_cm_ap_vld);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_fu_125_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( simulated_time );
    sensitive << ( tmp_2_reg_500 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_grp_fu_125_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_icmp_ln12_1_fu_304_p2);
    sensitive << ( p_Val2_6_reg_467 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_icmp_ln12_fu_299_p2);
    sensitive << ( tmp_4_reg_480 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_icmp_ln14_1_fu_314_p2);
    sensitive << ( p_Val2_6_reg_467 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_icmp_ln14_fu_309_p2);
    sensitive << ( p_Val2_6_reg_467 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_icmp_ln16_1_fu_324_p2);
    sensitive << ( p_Val2_6_reg_467 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_icmp_ln16_fu_319_p2);
    sensitive << ( p_Val2_6_reg_467 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_icmp_ln8_fu_293_p2);
    sensitive << ( echo );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_isNeg_fu_189_p3);
    sensitive << ( add_ln502_fu_183_p2 );

    SC_METHOD(thread_mantissa_V_fu_165_p4);
    sensitive << ( tmp_V_1_fu_161_p1 );

    SC_METHOD(thread_or_ln12_fu_421_p2);
    sensitive << ( and_ln14_2_fu_366_p2 );
    sensitive << ( and_ln12_2_fu_385_p2 );

    SC_METHOD(thread_p_Result_s_fu_143_p3);
    sensitive << ( p_Val2_s_fu_139_p1 );

    SC_METHOD(thread_p_Val2_5_fu_261_p3);
    sensitive << ( isNeg_fu_189_p3 );
    sensitive << ( zext_ln662_fu_247_p1 );
    sensitive << ( tmp_1_fu_251_p4 );

    SC_METHOD(thread_p_Val2_6_fu_275_p3);
    sensitive << ( p_Val2_5_fu_261_p3 );
    sensitive << ( p_Result_s_fu_143_p3 );
    sensitive << ( result_V_1_fu_269_p2 );

    SC_METHOD(thread_p_Val2_s_fu_139_p1);
    sensitive << ( reg_135 );

    SC_METHOD(thread_r_V_1_fu_233_p2);
    sensitive << ( zext_ln682_fu_175_p1 );
    sensitive << ( zext_ln1287_fu_219_p1 );

    SC_METHOD(thread_r_V_fu_227_p2);
    sensitive << ( mantissa_V_fu_165_p4 );
    sensitive << ( zext_ln1285_fu_223_p1 );

    SC_METHOD(thread_result_V_1_fu_269_p2);
    sensitive << ( p_Val2_5_fu_261_p3 );

    SC_METHOD(thread_select_ln12_2_fu_413_p3);
    sensitive << ( and_ln12_2_fu_385_p2 );

    SC_METHOD(thread_select_ln12_3_fu_427_p3);
    sensitive << ( or_ln12_fu_421_p2 );
    sensitive << ( select_ln12_2_fu_413_p3 );
    sensitive << ( select_ln8_2_fu_405_p3 );

    SC_METHOD(thread_select_ln14_1_fu_447_p3);
    sensitive << ( reg_135 );
    sensitive << ( and_ln14_2_reg_490 );
    sensitive << ( select_ln8_1_fu_440_p3 );

    SC_METHOD(thread_select_ln14_fu_372_p3);
    sensitive << ( p_Val2_6_reg_467 );
    sensitive << ( and_ln14_2_fu_366_p2 );
    sensitive << ( select_ln8_fu_335_p3 );

    SC_METHOD(thread_select_ln8_1_fu_440_p3);
    sensitive << ( reg_135 );
    sensitive << ( icmp_ln8_reg_485 );

    SC_METHOD(thread_select_ln8_2_fu_405_p3);
    sensitive << ( and_ln8_fu_399_p2 );

    SC_METHOD(thread_select_ln8_fu_335_p3);
    sensitive << ( p_Val2_6_reg_467 );
    sensitive << ( icmp_ln8_fu_293_p2 );

    SC_METHOD(thread_sens_range);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( select_ln12_3_fu_427_p3 );

    SC_METHOD(thread_sens_range_ap_vld);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sext_ln1311_1_fu_215_p1);
    sensitive << ( ush_fu_207_p3 );

    SC_METHOD(thread_sext_ln1311_fu_203_p1);
    sensitive << ( sub_ln1311_fu_197_p2 );

    SC_METHOD(thread_sub_ln1311_fu_197_p2);
    sensitive << ( tmp_V_fu_151_p4 );

    SC_METHOD(thread_tmp_1_fu_251_p4);
    sensitive << ( r_V_1_fu_233_p2 );

    SC_METHOD(thread_tmp_V_1_fu_161_p1);
    sensitive << ( p_Val2_s_fu_139_p1 );

    SC_METHOD(thread_tmp_V_fu_151_p4);
    sensitive << ( p_Val2_s_fu_139_p1 );

    SC_METHOD(thread_tmp_fu_239_p3);
    sensitive << ( r_V_fu_227_p2 );

    SC_METHOD(thread_ush_fu_207_p3);
    sensitive << ( add_ln502_fu_183_p2 );
    sensitive << ( isNeg_fu_189_p3 );
    sensitive << ( sext_ln1311_fu_203_p1 );

    SC_METHOD(thread_xor_ln12_fu_348_p2);
    sensitive << ( and_ln12_fu_342_p2 );

    SC_METHOD(thread_zext_ln1285_fu_223_p1);
    sensitive << ( sext_ln1311_1_fu_215_p1 );

    SC_METHOD(thread_zext_ln1287_fu_219_p1);
    sensitive << ( sext_ln1311_1_fu_215_p1 );

    SC_METHOD(thread_zext_ln502_fu_179_p1);
    sensitive << ( tmp_V_fu_151_p4 );

    SC_METHOD(thread_zext_ln662_fu_247_p1);
    sensitive << ( tmp_fu_239_p3 );

    SC_METHOD(thread_zext_ln682_fu_175_p1);
    sensitive << ( mantissa_V_fu_165_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, echo, "(port)echo");
    sc_trace(mVcdFile, simulated_time, "(port)simulated_time");
    sc_trace(mVcdFile, dist_cm, "(port)dist_cm");
    sc_trace(mVcdFile, dist_cm_ap_vld, "(port)dist_cm_ap_vld");
    sc_trace(mVcdFile, calc_voltage, "(port)calc_voltage");
    sc_trace(mVcdFile, calc_voltage_ap_vld, "(port)calc_voltage_ap_vld");
    sc_trace(mVcdFile, sens_range, "(port)sens_range");
    sc_trace(mVcdFile, sens_range_ap_vld, "(port)sens_range_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_125_p2, "grp_fu_125_p2");
    sc_trace(mVcdFile, reg_135, "reg_135");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, p_Val2_6_fu_275_p3, "p_Val2_6_fu_275_p3");
    sc_trace(mVcdFile, p_Val2_6_reg_467, "p_Val2_6_reg_467");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_4_reg_480, "tmp_4_reg_480");
    sc_trace(mVcdFile, icmp_ln8_fu_293_p2, "icmp_ln8_fu_293_p2");
    sc_trace(mVcdFile, icmp_ln8_reg_485, "icmp_ln8_reg_485");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, and_ln14_2_fu_366_p2, "and_ln14_2_fu_366_p2");
    sc_trace(mVcdFile, and_ln14_2_reg_490, "and_ln14_2_reg_490");
    sc_trace(mVcdFile, and_ln12_2_fu_385_p2, "and_ln12_2_fu_385_p2");
    sc_trace(mVcdFile, and_ln12_2_reg_495, "and_ln12_2_reg_495");
    sc_trace(mVcdFile, grp_fu_132_p1, "grp_fu_132_p1");
    sc_trace(mVcdFile, tmp_2_reg_500, "tmp_2_reg_500");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_fu_125_p0, "grp_fu_125_p0");
    sc_trace(mVcdFile, grp_fu_125_p1, "grp_fu_125_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, p_Val2_s_fu_139_p1, "p_Val2_s_fu_139_p1");
    sc_trace(mVcdFile, tmp_V_1_fu_161_p1, "tmp_V_1_fu_161_p1");
    sc_trace(mVcdFile, mantissa_V_fu_165_p4, "mantissa_V_fu_165_p4");
    sc_trace(mVcdFile, tmp_V_fu_151_p4, "tmp_V_fu_151_p4");
    sc_trace(mVcdFile, zext_ln502_fu_179_p1, "zext_ln502_fu_179_p1");
    sc_trace(mVcdFile, add_ln502_fu_183_p2, "add_ln502_fu_183_p2");
    sc_trace(mVcdFile, sub_ln1311_fu_197_p2, "sub_ln1311_fu_197_p2");
    sc_trace(mVcdFile, isNeg_fu_189_p3, "isNeg_fu_189_p3");
    sc_trace(mVcdFile, sext_ln1311_fu_203_p1, "sext_ln1311_fu_203_p1");
    sc_trace(mVcdFile, ush_fu_207_p3, "ush_fu_207_p3");
    sc_trace(mVcdFile, sext_ln1311_1_fu_215_p1, "sext_ln1311_1_fu_215_p1");
    sc_trace(mVcdFile, zext_ln1285_fu_223_p1, "zext_ln1285_fu_223_p1");
    sc_trace(mVcdFile, zext_ln682_fu_175_p1, "zext_ln682_fu_175_p1");
    sc_trace(mVcdFile, zext_ln1287_fu_219_p1, "zext_ln1287_fu_219_p1");
    sc_trace(mVcdFile, r_V_fu_227_p2, "r_V_fu_227_p2");
    sc_trace(mVcdFile, tmp_fu_239_p3, "tmp_fu_239_p3");
    sc_trace(mVcdFile, r_V_1_fu_233_p2, "r_V_1_fu_233_p2");
    sc_trace(mVcdFile, zext_ln662_fu_247_p1, "zext_ln662_fu_247_p1");
    sc_trace(mVcdFile, tmp_1_fu_251_p4, "tmp_1_fu_251_p4");
    sc_trace(mVcdFile, p_Val2_5_fu_261_p3, "p_Val2_5_fu_261_p3");
    sc_trace(mVcdFile, p_Result_s_fu_143_p3, "p_Result_s_fu_143_p3");
    sc_trace(mVcdFile, result_V_1_fu_269_p2, "result_V_1_fu_269_p2");
    sc_trace(mVcdFile, icmp_ln16_fu_319_p2, "icmp_ln16_fu_319_p2");
    sc_trace(mVcdFile, icmp_ln16_1_fu_324_p2, "icmp_ln16_1_fu_324_p2");
    sc_trace(mVcdFile, icmp_ln12_fu_299_p2, "icmp_ln12_fu_299_p2");
    sc_trace(mVcdFile, icmp_ln12_1_fu_304_p2, "icmp_ln12_1_fu_304_p2");
    sc_trace(mVcdFile, and_ln12_fu_342_p2, "and_ln12_fu_342_p2");
    sc_trace(mVcdFile, xor_ln12_fu_348_p2, "xor_ln12_fu_348_p2");
    sc_trace(mVcdFile, icmp_ln14_1_fu_314_p2, "icmp_ln14_1_fu_314_p2");
    sc_trace(mVcdFile, icmp_ln14_fu_309_p2, "icmp_ln14_fu_309_p2");
    sc_trace(mVcdFile, and_ln14_1_fu_360_p2, "and_ln14_1_fu_360_p2");
    sc_trace(mVcdFile, and_ln14_fu_354_p2, "and_ln14_fu_354_p2");
    sc_trace(mVcdFile, select_ln8_fu_335_p3, "select_ln8_fu_335_p3");
    sc_trace(mVcdFile, and_ln12_1_fu_379_p2, "and_ln12_1_fu_379_p2");
    sc_trace(mVcdFile, select_ln14_fu_372_p3, "select_ln14_fu_372_p3");
    sc_trace(mVcdFile, and_ln16_fu_329_p2, "and_ln16_fu_329_p2");
    sc_trace(mVcdFile, and_ln8_fu_399_p2, "and_ln8_fu_399_p2");
    sc_trace(mVcdFile, or_ln12_fu_421_p2, "or_ln12_fu_421_p2");
    sc_trace(mVcdFile, select_ln12_2_fu_413_p3, "select_ln12_2_fu_413_p3");
    sc_trace(mVcdFile, select_ln8_2_fu_405_p3, "select_ln8_2_fu_405_p3");
    sc_trace(mVcdFile, select_ln12_3_fu_427_p3, "select_ln12_3_fu_427_p3");
    sc_trace(mVcdFile, select_ln8_1_fu_440_p3, "select_ln8_1_fu_440_p3");
    sc_trace(mVcdFile, select_ln14_1_fu_447_p3, "select_ln14_1_fu_447_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("top.hdltvin.dat");
    mHdltvoutHandle.open("top.hdltvout.dat");
}

top::~top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete top_dmul_64ns_64ns_64_5_max_dsp_1_U1;
    delete top_sitodp_32ns_64_4_1_U2;
}

void top::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void top::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        and_ln12_2_reg_495 = and_ln12_2_fu_385_p2.read();
        and_ln14_2_reg_490 = and_ln14_2_fu_366_p2.read();
        icmp_ln8_reg_485 = icmp_ln8_fu_293_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        p_Val2_6_reg_467 = p_Val2_6_fu_275_p3.read();
        tmp_4_reg_480 = p_Val2_6_fu_275_p3.read().range(31, 2);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        reg_135 = grp_fu_125_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_2_reg_500 = grp_fu_132_p1.read();
    }
}

void top::thread_add_ln502_fu_183_p2() {
    add_ln502_fu_183_p2 = (!ap_const_lv12_C01.is_01() || !zext_ln502_fu_179_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_C01) + sc_biguint<12>(zext_ln502_fu_179_p1.read()));
}

void top::thread_and_ln12_1_fu_379_p2() {
    and_ln12_1_fu_379_p2 = (icmp_ln12_1_fu_304_p2.read() & icmp_ln8_fu_293_p2.read());
}

void top::thread_and_ln12_2_fu_385_p2() {
    and_ln12_2_fu_385_p2 = (and_ln12_1_fu_379_p2.read() & icmp_ln12_fu_299_p2.read());
}

void top::thread_and_ln12_fu_342_p2() {
    and_ln12_fu_342_p2 = (icmp_ln12_fu_299_p2.read() & icmp_ln12_1_fu_304_p2.read());
}

void top::thread_and_ln14_1_fu_360_p2() {
    and_ln14_1_fu_360_p2 = (icmp_ln14_1_fu_314_p2.read() & icmp_ln14_fu_309_p2.read());
}

void top::thread_and_ln14_2_fu_366_p2() {
    and_ln14_2_fu_366_p2 = (and_ln14_1_fu_360_p2.read() & and_ln14_fu_354_p2.read());
}

void top::thread_and_ln14_fu_354_p2() {
    and_ln14_fu_354_p2 = (icmp_ln8_fu_293_p2.read() & xor_ln12_fu_348_p2.read());
}

void top::thread_and_ln16_fu_329_p2() {
    and_ln16_fu_329_p2 = (icmp_ln16_fu_319_p2.read() & icmp_ln16_1_fu_324_p2.read());
}

void top::thread_and_ln8_fu_399_p2() {
    and_ln8_fu_399_p2 = (icmp_ln8_fu_293_p2.read() & and_ln16_fu_329_p2.read());
}

void top::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void top::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void top::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void top::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void top::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void top::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void top::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void top::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void top::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void top::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void top::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void top::thread_calc_voltage() {
    calc_voltage = (!and_ln12_2_reg_495.read()[0].is_01())? sc_lv<64>(): ((and_ln12_2_reg_495.read()[0].to_bool())? reg_135.read(): select_ln14_1_fu_447_p3.read());
}

void top::thread_calc_voltage_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        calc_voltage_ap_vld = ap_const_logic_1;
    } else {
        calc_voltage_ap_vld = ap_const_logic_0;
    }
}

void top::thread_dist_cm() {
    dist_cm = (!and_ln12_2_fu_385_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln12_2_fu_385_p2.read()[0].to_bool())? p_Val2_6_reg_467.read(): select_ln14_fu_372_p3.read());
}

void top::thread_dist_cm_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        dist_cm_ap_vld = ap_const_logic_1;
    } else {
        dist_cm_ap_vld = ap_const_logic_0;
    }
}

void top::thread_grp_fu_125_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_125_p0 = tmp_2_reg_500.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_125_p0 = simulated_time.read();
    } else {
        grp_fu_125_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void top::thread_grp_fu_125_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_125_p1 = ap_const_lv64_3F5A36E2EB1C432D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_125_p1 = ap_const_lv64_3FA16872B020C49C;
    } else {
        grp_fu_125_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void top::thread_icmp_ln12_1_fu_304_p2() {
    icmp_ln12_1_fu_304_p2 = (!p_Val2_6_reg_467.read().is_01() || !ap_const_lv32_65.is_01())? sc_lv<1>(): (sc_bigint<32>(p_Val2_6_reg_467.read()) < sc_bigint<32>(ap_const_lv32_65));
}

void top::thread_icmp_ln12_fu_299_p2() {
    icmp_ln12_fu_299_p2 = (!tmp_4_reg_480.read().is_01() || !ap_const_lv30_0.is_01())? sc_lv<1>(): (sc_bigint<30>(tmp_4_reg_480.read()) > sc_bigint<30>(ap_const_lv30_0));
}

void top::thread_icmp_ln14_1_fu_314_p2() {
    icmp_ln14_1_fu_314_p2 = (!p_Val2_6_reg_467.read().is_01() || !ap_const_lv32_C9.is_01())? sc_lv<1>(): (sc_bigint<32>(p_Val2_6_reg_467.read()) < sc_bigint<32>(ap_const_lv32_C9));
}

void top::thread_icmp_ln14_fu_309_p2() {
    icmp_ln14_fu_309_p2 = (!p_Val2_6_reg_467.read().is_01() || !ap_const_lv32_64.is_01())? sc_lv<1>(): (sc_bigint<32>(p_Val2_6_reg_467.read()) > sc_bigint<32>(ap_const_lv32_64));
}

void top::thread_icmp_ln16_1_fu_324_p2() {
    icmp_ln16_1_fu_324_p2 = (!p_Val2_6_reg_467.read().is_01() || !ap_const_lv32_12D.is_01())? sc_lv<1>(): (sc_bigint<32>(p_Val2_6_reg_467.read()) < sc_bigint<32>(ap_const_lv32_12D));
}

void top::thread_icmp_ln16_fu_319_p2() {
    icmp_ln16_fu_319_p2 = (!p_Val2_6_reg_467.read().is_01() || !ap_const_lv32_C8.is_01())? sc_lv<1>(): (sc_bigint<32>(p_Val2_6_reg_467.read()) > sc_bigint<32>(ap_const_lv32_C8));
}

void top::thread_icmp_ln8_fu_293_p2() {
    icmp_ln8_fu_293_p2 = (!echo.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(echo.read() == ap_const_lv32_1);
}

void top::thread_isNeg_fu_189_p3() {
    isNeg_fu_189_p3 = add_ln502_fu_183_p2.read().range(11, 11);
}

void top::thread_mantissa_V_fu_165_p4() {
    mantissa_V_fu_165_p4 = esl_concat<53,1>(esl_concat<1,52>(ap_const_lv1_1, tmp_V_1_fu_161_p1.read()), ap_const_lv1_0);
}

void top::thread_or_ln12_fu_421_p2() {
    or_ln12_fu_421_p2 = (and_ln12_2_fu_385_p2.read() | and_ln14_2_fu_366_p2.read());
}

void top::thread_p_Result_s_fu_143_p3() {
    p_Result_s_fu_143_p3 = p_Val2_s_fu_139_p1.read().range(63, 63);
}

void top::thread_p_Val2_5_fu_261_p3() {
    p_Val2_5_fu_261_p3 = (!isNeg_fu_189_p3.read()[0].is_01())? sc_lv<32>(): ((isNeg_fu_189_p3.read()[0].to_bool())? zext_ln662_fu_247_p1.read(): tmp_1_fu_251_p4.read());
}

void top::thread_p_Val2_6_fu_275_p3() {
    p_Val2_6_fu_275_p3 = (!p_Result_s_fu_143_p3.read()[0].is_01())? sc_lv<32>(): ((p_Result_s_fu_143_p3.read()[0].to_bool())? result_V_1_fu_269_p2.read(): p_Val2_5_fu_261_p3.read());
}

void top::thread_p_Val2_s_fu_139_p1() {
    p_Val2_s_fu_139_p1 = reg_135.read();
}

void top::thread_r_V_1_fu_233_p2() {
    r_V_1_fu_233_p2 = (!zext_ln1287_fu_219_p1.read().is_01())? sc_lv<137>(): zext_ln682_fu_175_p1.read() << (unsigned short)zext_ln1287_fu_219_p1.read().to_uint();
}

void top::thread_r_V_fu_227_p2() {
    r_V_fu_227_p2 = (!zext_ln1285_fu_223_p1.read().is_01())? sc_lv<54>(): mantissa_V_fu_165_p4.read() >> (unsigned short)zext_ln1285_fu_223_p1.read().to_uint();
}

void top::thread_result_V_1_fu_269_p2() {
    result_V_1_fu_269_p2 = (!ap_const_lv32_0.is_01() || !p_Val2_5_fu_261_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(p_Val2_5_fu_261_p3.read()));
}

void top::thread_select_ln12_2_fu_413_p3() {
    select_ln12_2_fu_413_p3 = (!and_ln12_2_fu_385_p2.read()[0].is_01())? sc_lv<2>(): ((and_ln12_2_fu_385_p2.read()[0].to_bool())? ap_const_lv2_1: ap_const_lv2_2);
}

void top::thread_select_ln12_3_fu_427_p3() {
    select_ln12_3_fu_427_p3 = (!or_ln12_fu_421_p2.read()[0].is_01())? sc_lv<2>(): ((or_ln12_fu_421_p2.read()[0].to_bool())? select_ln12_2_fu_413_p3.read(): select_ln8_2_fu_405_p3.read());
}

void top::thread_select_ln14_1_fu_447_p3() {
    select_ln14_1_fu_447_p3 = (!and_ln14_2_reg_490.read()[0].is_01())? sc_lv<64>(): ((and_ln14_2_reg_490.read()[0].to_bool())? reg_135.read(): select_ln8_1_fu_440_p3.read());
}

void top::thread_select_ln14_fu_372_p3() {
    select_ln14_fu_372_p3 = (!and_ln14_2_fu_366_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln14_2_fu_366_p2.read()[0].to_bool())? p_Val2_6_reg_467.read(): select_ln8_fu_335_p3.read());
}

void top::thread_select_ln8_1_fu_440_p3() {
    select_ln8_1_fu_440_p3 = (!icmp_ln8_reg_485.read()[0].is_01())? sc_lv<64>(): ((icmp_ln8_reg_485.read()[0].to_bool())? reg_135.read(): ap_const_lv64_0);
}

void top::thread_select_ln8_2_fu_405_p3() {
    select_ln8_2_fu_405_p3 = (!and_ln8_fu_399_p2.read()[0].is_01())? sc_lv<2>(): ((and_ln8_fu_399_p2.read()[0].to_bool())? ap_const_lv2_3: ap_const_lv2_0);
}

void top::thread_select_ln8_fu_335_p3() {
    select_ln8_fu_335_p3 = (!icmp_ln8_fu_293_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln8_fu_293_p2.read()[0].to_bool())? p_Val2_6_reg_467.read(): ap_const_lv32_0);
}

void top::thread_sens_range() {
    sens_range = esl_zext<32,2>(select_ln12_3_fu_427_p3.read());
}

void top::thread_sens_range_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sens_range_ap_vld = ap_const_logic_1;
    } else {
        sens_range_ap_vld = ap_const_logic_0;
    }
}

void top::thread_sext_ln1311_1_fu_215_p1() {
    sext_ln1311_1_fu_215_p1 = esl_sext<32,12>(ush_fu_207_p3.read());
}

void top::thread_sext_ln1311_fu_203_p1() {
    sext_ln1311_fu_203_p1 = esl_sext<12,11>(sub_ln1311_fu_197_p2.read());
}

void top::thread_sub_ln1311_fu_197_p2() {
    sub_ln1311_fu_197_p2 = (!ap_const_lv11_3FF.is_01() || !tmp_V_fu_151_p4.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) - sc_biguint<11>(tmp_V_fu_151_p4.read()));
}

void top::thread_tmp_1_fu_251_p4() {
    tmp_1_fu_251_p4 = r_V_1_fu_233_p2.read().range(84, 53);
}

void top::thread_tmp_V_1_fu_161_p1() {
    tmp_V_1_fu_161_p1 = p_Val2_s_fu_139_p1.read().range(52-1, 0);
}

void top::thread_tmp_V_fu_151_p4() {
    tmp_V_fu_151_p4 = p_Val2_s_fu_139_p1.read().range(62, 52);
}

void top::thread_tmp_fu_239_p3() {
    tmp_fu_239_p3 = r_V_fu_227_p2.read().range(53, 53);
}

void top::thread_ush_fu_207_p3() {
    ush_fu_207_p3 = (!isNeg_fu_189_p3.read()[0].is_01())? sc_lv<12>(): ((isNeg_fu_189_p3.read()[0].to_bool())? sext_ln1311_fu_203_p1.read(): add_ln502_fu_183_p2.read());
}

void top::thread_xor_ln12_fu_348_p2() {
    xor_ln12_fu_348_p2 = (and_ln12_fu_342_p2.read() ^ ap_const_lv1_1);
}

void top::thread_zext_ln1285_fu_223_p1() {
    zext_ln1285_fu_223_p1 = esl_zext<54,32>(sext_ln1311_1_fu_215_p1.read());
}

void top::thread_zext_ln1287_fu_219_p1() {
    zext_ln1287_fu_219_p1 = esl_zext<137,32>(sext_ln1311_1_fu_215_p1.read());
}

void top::thread_zext_ln502_fu_179_p1() {
    zext_ln502_fu_179_p1 = esl_zext<12,11>(tmp_V_fu_151_p4.read());
}

void top::thread_zext_ln662_fu_247_p1() {
    zext_ln662_fu_247_p1 = esl_zext<32,1>(tmp_fu_239_p3.read());
}

void top::thread_zext_ln682_fu_175_p1() {
    zext_ln682_fu_175_p1 = esl_zext<137,54>(mantissa_V_fu_165_p4.read());
}

void top::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

void top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"echo\" :  \"" << echo.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"simulated_time\" :  \"" << simulated_time.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dist_cm\" :  \"" << dist_cm.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dist_cm_ap_vld\" :  \"" << dist_cm_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"calc_voltage\" :  \"" << calc_voltage.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"calc_voltage_ap_vld\" :  \"" << calc_voltage_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sens_range\" :  \"" << sens_range.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sens_range_ap_vld\" :  \"" << sens_range_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

